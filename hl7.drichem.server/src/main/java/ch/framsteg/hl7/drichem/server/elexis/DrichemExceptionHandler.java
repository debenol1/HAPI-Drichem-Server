/*******************************************************************************
 * Copyright (c) 2020-2022,  Olivier Debenath
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Olivier Debenath <olivier@debenath.ch> - initial implementation
 *    
 *******************************************************************************/
package ch.framsteg.hl7.drichem.server.elexis;

import java.util.Map;

import org.apache.log4j.Logger;

import ca.uhn.hl7v2.HL7Exception;
import ca.uhn.hl7v2.protocol.ReceivingApplicationExceptionHandler;

public class DrichemExceptionHandler implements ReceivingApplicationExceptionHandler {

	private static Logger logger = Logger.getLogger(DrichemExceptionHandler.class);

	/**
	 * Process an exception.
	 * 
	 * @param theIncomingMessage  the incoming message. This is the raw message
	 *                            which was received from the external system
	 * @param theIncomingMetadata Any metadata that accompanies the incoming
	 *                            message. See
	 *                            {@link ca.uhn.hl7v2.protocol.Transportable#getMetadata()}
	 * @param theOutgoingMessage  the outgoing message. The response NAK message
	 *                            generated by HAPI.
	 * @param theE                the exception which was received
	 * @return The new outgoing message. This can be set to the value provided by
	 *         HAPI in <code>outgoingMessage</code>, or may be replaced with another
	 *         message. <b>This method may not return <code>null</code></b>.
	 */
	@Override
	public String processException(String incomingMessage, 
			Map<String, Object> incomingMetadata, String outgoingMessage,
			Exception e) throws HL7Exception {
		logger.info(incomingMessage);
		logger.info(outgoingMessage);

		return outgoingMessage;
	}
}
